check responsive
dark theme

native splash screen
animate and redesign onBoarding
add text to on boarding screen
Bad state: Stream has already been listened to. => on boarding screen
use regex in register
make all  classes  equatable
try turn execute to call in use case
try using dismiss dialog in all function before switch in state_render_impl
animated drawer from ismail elmogy
user regex in register



priority bugs
error state in success the bug not in flow state











CLEAN ARCHITECTURE

- state renderer
- error handler
- build model response in data layer
- build http builder (app service client) with use cases
- create model entity in domain layer with only necessary members
- dio factory => add dio observer
- class with needed parameters in requests
- remote data source
- mapping model from data to domain
- base use case
- base repository in domain
- main use case
- class with inputs in main use case
- repository in data layer
- view model
- get it dependency injection
    - shared prefs
    - app prefs
    - dio
    - app service client
    - network info
    - remote data source
    - repository
    - every use case view model
- add dependency injection module before open view



///-------------------------------------------------------------------------------------------------------------

MVVM -> STREAM CONTROLLER

- create base view model , inputs ,outputs
- create sink ,stream , stream controller of state flow in app
- create module view model ,inputs ,outputs
- inputs has => sink and logic method came from ui
- outputs has => streams of final shape of data
- main class override fun from base , input,outputs
- create stream controller for every input-output
- super.dispose and cancel all stream controller in dispose method
- start => add content state to sink state from base class and notice on boarding example
- override sink,streams
- add initial events to each stream controller
- freezed object
- control stream and add events to sink using logic methods from input class and copyWith freezed object
- go to ui
- bind to view model => start , add listener to controllers by logic input methods
- add bind to init ,and dispose to dispose
- stream builder flow state
- stream builder for every input
